--- benchspec/CPU2006/447.dealII/src/include/lac/block_vector.h	2019-11-30 21:15:43.791858437 -0500
+++ benchspec/CPU2006/447.dealII/src/include/lac/block_vector.h	2019-11-30 21:09:47.965870330 -0500
@@ -19,6 +19,7 @@
 #include <lac/block_indices.h>
 #include <base/exceptions.h>
 #include <cstdio>
+#include <stddef.h>
 #include <vector>
 #include <iterator>
 
--- benchspec/CPU2006/450.soplex/src/mpsinput.cc	2019-11-30 21:13:59.204450035 -0500
+++ benchspec/CPU2006/450.soplex/src/mpsinput.cc	2019-11-30 21:14:54.556137043 -0500
@@ -72,7 +72,7 @@
       // Read until we have a not comment line.
       do
       {
-         if (m_input.getline(m_buf, sizeof(m_buf)) == 0)
+         if (!m_input.getline(m_buf, sizeof(m_buf)))
             return false;
         m_lineno++;
 
--- benchspec/CPU2006/453.povray/src/povmscpp.h	2005-06-02 22:43:52.000000000 -0400
+++ benchspec/CPU2006/453.povray/src/povmscpp.h	2018-11-11 13:29:05.000000000 -0500
@@ -111,6 +111,7 @@
 
 class POVMS_Object : public POVMS_Container
 {
+    bool bad;
 		friend class POVMS_Message;
 		friend class POVMS_MessageReceiver;
 	public:
@@ -134,7 +135,8 @@
 
 		const POVMSObject& operator*() const;
 		const POVMSObjectPtr operator->() const;
-		POVMSObject operator()();
+		//POVMSObject operator()();
+        bool invoke(POVMSObject *result);
 
 		void SetString(POVMSType key, const char *str); // Note: Strings may not contain \0 characters codes!
 		void SetInt(POVMSType key, POVMSInt value);
--- benchspec/CPU2006/453.povray/src/povmscpp.cpp	2005-06-02 22:43:52.000000000 -0400
+++ benchspec/CPU2006/453.povray/src/povmscpp.cpp	2018-11-11 13:29:04.000000000 -0500
@@ -467,10 +467,11 @@
 POVMS_Object::POVMS_Object(POVMS_Object& source)
 {
 	int err;
+    this->bad = 0;
 
 	err = POVMSObject_Copy(&source.data, &data);
 	if(err != kNoErr)
-		throw err;
+		this->bad = 1; //throw err;
 }
 
 POVMS_Object::~POVMS_Object()
@@ -597,12 +598,15 @@
 	return (const POVMSObjectPtr)(&data);
 }
 
-POVMSObject POVMS_Object::operator()()
+//POVMSObject POVMS_Object::operator()()
+bool POVMS_Object::invoke(POVMSObject *result)
 {
 	POVMS_Object tc(*this);
+    if(tc.bad) return false;
 	POVMSObject t = *((POVMSObjectPtr)(&tc.data));
 	tc.DetachData();
-	return t;
+    *result = t;
+    return true;
 }
 
 void POVMS_Object::SetString(POVMSType key, const char *str)
@@ -1021,8 +1025,14 @@
 						nodeptr->handleroo->Call(msg_obj, result_obj, mode);
 
 						msg_obj.DetachData();
-						if(result != NULL)
-							*result = result_obj();
+						//if(result != NULL)
+						//	*result = result_obj();
+                        if(result) {
+                            if(!result_obj.invoke(result)) {
+                                err = kObjectAccessErr;
+                                continue;
+                            }
+                        }
 						result_obj.DetachData();
 					}
 					else if(nodeptr->handler != NULL)
--- benchspec/CPU2006/471.omnetpp/src/libs/cmdenv/cmdenv.cc	2006-12-13 18:49:03.000000000 -0500
+++ benchspec/CPU2006/471.omnetpp/src/libs/cmdenv/cmdenv.cc	2018-11-11 13:29:07.000000000 -0500
@@ -319,7 +319,14 @@
                // execute event
                simulation.doOneEvent( mod );
 
-               checkTimeLimits();
+               if(cTerminationException *e = checkTimeLimits()) {
+                   ev.disable_tracing = false;
+                   stopClock();
+
+                   displayMessage(e);
+                   delete e;
+                   return;
+               }
                if (sigint_received)
                    throw new cTerminationException("SIGINT or SIGTERM received, exiting");
            }
@@ -388,7 +395,14 @@
                simulation.doOneEvent( mod );
 
                // AV 2004-05-20: speedometer.addEvent(simulation.simTime());
-               checkTimeLimits();
+               if(cTerminationException *e = checkTimeLimits()) {
+                   ev.disable_tracing = false;
+                   stopClock();
+
+                   displayMessage(e);
+                   delete e;
+                   return;
+               }
                if (sigint_received)
                    throw new cTerminationException("SIGINT or SIGTERM received, exiting");
            }
--- benchspec/CPU2006/471.omnetpp/src/libs/envir/omnetapp.cc	2006-12-13 18:49:03.000000000 -0500
+++ benchspec/CPU2006/471.omnetpp/src/libs/envir/omnetapp.cc	2018-11-11 13:29:08.000000000 -0500
@@ -523,11 +523,12 @@
 
 }
 
-void TOmnetApp::checkTimeLimits()
+cTerminationException *TOmnetApp::checkTimeLimits()
 {
     if (opt_simtimelimit!=0 && simulation.simTime()>=opt_simtimelimit)
-         throw new cTerminationException(eSIMTIME);
+         return new cTerminationException(eSIMTIME);
     else if (opt_cputimelimit!=0 && elapsedtime+time(0)-laststarted>=opt_cputimelimit)
-         throw new cTerminationException(eREALTIME);
+         return new cTerminationException(eREALTIME);
+    return 0;
 }
 
--- benchspec/CPU2006/471.omnetpp/src/libs/envir/omnetapp.h	2006-12-13 18:49:03.000000000 -0500
+++ benchspec/CPU2006/471.omnetpp/src/libs/envir/omnetapp.h	2018-11-11 13:29:09.000000000 -0500
@@ -220,7 +220,7 @@
      * Checks if the current simulation has reached the simulation
      * or real time limits, and if so, throws an appropriate exception.
      */
-    void checkTimeLimits();
+    cTerminationException *checkTimeLimits();
 
     /**
      * Resets the clock measuring the elapsed (real) time spent in this
